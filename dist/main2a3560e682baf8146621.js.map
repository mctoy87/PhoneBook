{"version":3,"file":"main2a3560e682baf8146621.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACAiD;AACqB;AACtE;AACA;AACA;AACA,EAAE,EAAE,0DAAc;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,qEAAiB;AACvB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAc;AAClB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;AC9EF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAC;;;;;;;;;;;;;;;;;;ACpM+C;AACL;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,0DAAc;AAClB;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,8DAAmB;AAClC;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;UCpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNwD;AACW;AACzB;AACgC;AAC1E;AACyB;AACzB;AACA;AACA;AACA;AACA,EAAE,EAAE,iEAAc;AAClB;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,0DAAO;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,EAAE,kEAAe;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iEAAc;AACjC;AACA,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yEAAc;AAC/B,IAAI,yEAAc;AAClB;AACA;AACA;AACA;AACA,mBAAmB,yEAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA","sources":["webpack://phonebook/./src/css/style.css?c1a4","webpack://phonebook/./src/script/control.js","webpack://phonebook/./src/script/createElements.js","webpack://phonebook/./src/script/render.js","webpack://phonebook/./src/script/serviceStorage.js","webpack://phonebook/webpack/bootstrap","webpack://phonebook/webpack/runtime/define property getters","webpack://phonebook/webpack/runtime/hasOwnProperty shorthand","webpack://phonebook/webpack/runtime/make namespace object","webpack://phonebook/./src/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import createElements from './createElements.js';\r\nimport {removeContactData, addContactData} from './serviceStorage.js';\r\n\r\nconst {\r\n  createRow,\r\n} = createElements;\r\n\r\nconst modalControl = (btnAdd, formOverlay) => {\r\n  const openModal = () => {\r\n    formOverlay.classList.add('is-visible');\r\n  };\r\n  btnAdd.addEventListener('click', openModal);\r\n\r\n  const closeModal = () => {\r\n    formOverlay.classList.remove('is-visible');\r\n  };\r\n  formOverlay.addEventListener('click', e => {\r\n    const target = e.target;\r\n    if (target === formOverlay ||\r\n        target.classList.contains('close')) {\r\n      closeModal();\r\n    }\r\n  });\r\n\r\n  return {\r\n    closeModal,\r\n  };\r\n};\r\n\r\nconst deleteControl = (btnDel, list) => {\r\n  btnDel.addEventListener('click', () => {\r\n    document.querySelectorAll('.delete').forEach(del => {\r\n      del.classList.toggle('is-visible');\r\n    });\r\n  });\r\n\r\n  list.addEventListener('click', e => {\r\n    const target = e.target;\r\n    if (target.closest('.del-icon')) {\r\n      target.closest('.contact').remove();\r\n      // удалить из localStorage\r\n      const phoneDel = target.closest('.contact').childNodes[3].textContent;\r\n      removeContactData(phoneDel);\r\n    }\r\n  });\r\n};\r\n\r\nconst addContactPage = (contact, list) => {\r\n  document.querySelectorAll('.delete').forEach(del => {\r\n    del.classList.remove('is-visible');\r\n  });\r\n  list.append(createRow(contact));\r\n};\r\n\r\nconst formControl = (form, list, closeModal) => {\r\n  form.addEventListener('submit', e => {\r\n    // не дает обновлять страницу на submit\r\n    e.preventDefault();\r\n    // отправляет данные\r\n    const formData = new FormData(e.target);\r\n    const newContact = Object.fromEntries(formData);\r\n\r\n    // добавляет новый контакт в верстку\r\n    addContactPage(newContact, list);\r\n    // добавляет новый контакт в хранилище\r\n    addContactData(newContact);\r\n    // очищает форму в конце\r\n    form.reset();\r\n    // закрывает модалку\r\n    closeModal();\r\n  });\r\n};\r\n\r\nexport default {\r\n  modalControl,\r\n  deleteControl,\r\n  addContactPage,\r\n  formControl,\r\n};\r\n","// создает контейнер для header\r\nconst createContainer = () => {\r\n  const container = document.createElement('div');\r\n  container.classList.add('container');\r\n  return container;\r\n};\r\n\r\nconst createHeader = () => {\r\n  const header = document.createElement('header');\r\n  header.classList.add('header');\r\n  // т.к. в header все элементы располагаются внутри контейнера\r\n  const headerContainer = createContainer();\r\n  header.append(headerContainer);\r\n  // привязать header - headerContainer\r\n  // далее можно исп-ть св-во header.headerContainer для добавления эл-в\r\n  header.headerContainer = headerContainer;\r\n  return header;\r\n};\r\n\r\nconst createLogo = title => {\r\n  const h1 = document.createElement('h1');\r\n  h1.classList.add('logo');\r\n  h1.textContent = `Телефонный справочник. ${title}`;\r\n\r\n  return h1;\r\n};\r\n\r\nconst createMain = () => {\r\n  const main = document.createElement('main');\r\n  const mainContainer = createContainer();\r\n  main.append(mainContainer);\r\n  // позволяет добавлять внутрь эл-ты\r\n  main.mainContainer = mainContainer;\r\n  return main;\r\n};\r\n\r\nconst createButtonsGroup = params => {\r\n  const btnWrapper = document.createElement('div');\r\n  btnWrapper.classList.add('btn-wrapper');\r\n  // заполним кнопками - перебор массива и возврат кнопок\r\n  // деструктуируем объект\r\n  const btns = params.map(({className, type, text}) => {\r\n    // создаем кнопки\r\n    const button = document.createElement('button');\r\n    // заполним данными из атрибутов\r\n    button.className = className;\r\n    button.type = type;\r\n    button.textContent = text;\r\n    return button;\r\n  });\r\n  // вставить btns в btnWrapper\r\n  btnWrapper.append(...btns);\r\n  // возвращаем объект ({}- после return)\r\n  return {\r\n    btnWrapper,\r\n    btns,\r\n  };\r\n};\r\n\r\nconst createTable = () => {\r\n  const table = document.createElement('table');\r\n  table.classList.add('table', 'table-striped');\r\n\r\n  const thead = document.createElement('thead');\r\n  thead.insertAdjacentHTML('beforeend', `\r\n    <tr>\r\n      <th class=\"delete\">Удалить</th>\r\n      <th class=\"firstName\">Имя</th>\r\n      <th class=\"surName\">Фамилия</th>\r\n      <th>Телефон</th>\r\n    </tr>\r\n  `);\r\n\r\n  const tbody = document.createElement('tbody');\r\n  // вставить в таблицу\r\n  table.append(thead, tbody);\r\n  // чтобы не возвращать объект table, а на прямую\r\n  table.tbody = tbody;\r\n  table.thead = thead;\r\n\r\n  return table;\r\n};\r\n\r\nconst createForm = () => {\r\n  const overlay = document.createElement('div');\r\n  overlay.classList.add('form-overlay');\r\n\r\n  // создать модалку\r\n  const form = document.createElement('form');\r\n  form.classList.add('form');\r\n  form.insertAdjacentHTML('beforeend', `\r\n    <button class=\"close\" type=\"button\"></button>\r\n    <h2 class=\"form-title\">Добавить контакт</h2>\r\n    <div class=\"form-group\">\r\n      <label class=\"form-label\" for=\"name\" >Имя:</label>\r\n      <input class=\"form-input\" name=\"name\" \r\n        id=\"name\" type=\"text\" required>\r\n    </div>\r\n      <div class=\"form-group\">\r\n      <label class=\"form-label\" for=\"surname\" >Фамилия:</label>\r\n    <input class=\"form-input\" name=\"surname\" \r\n      id=\"surname\" type=\"text\" required>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label class=\"form-label\" for=\"phone\">Телефон:</label>\r\n      <input class=\"form-input\" name=\"phone\" \r\n        id=\"phone\" type=\"number\" required>\r\n    </div>\r\n  `);\r\n\r\n  // кнопки в модалке скопируем из buttonGroup\r\n  const buttonGroup = createButtonsGroup([\r\n    // придумываем параметры кнопок\r\n    {\r\n      className: 'btn btn-primary mr-3',\r\n      type: 'submit',\r\n      text: 'Добавить',\r\n    },\r\n    {\r\n      className: 'btn btn-danger',\r\n      type: 'reset',\r\n      text: 'Отмена',\r\n    },\r\n  ]);\r\n\r\n  form.append(...buttonGroup.btns);\r\n\r\n  overlay.append(form);\r\n\r\n  return {\r\n    overlay,\r\n    form,\r\n  };\r\n};\r\n\r\nconst createFooter = () => {\r\n  const footer = document.createElement('footer');\r\n  footer.classList.add('footer');\r\n  // т.к. в footer все элементы располагаются внутри контейнера\r\n  const footerContainer = createContainer();\r\n  footer.append(footerContainer);\r\n  // привязать footer - footerContainer\r\n  // далее можно исп-ть св-во footer.footerContainer для добавления эл-в\r\n  footer.footerContainer = footerContainer;\r\n  return footer;\r\n};\r\n\r\nconst createRow = ({name: firstName, surname, phone}) => {\r\n  const tr = document.createElement('tr');\r\n  tr.classList.add('contact');\r\n\r\n  const tdDel = document.createElement('td');\r\n  tdDel.classList.add('delete');\r\n\r\n  const buttonDel = document.createElement('button');\r\n  tdDel.append(buttonDel);\r\n  buttonDel.classList.add('del-icon');\r\n\r\n  const tdName = document.createElement('td');\r\n  tdName.textContent = firstName;\r\n\r\n  const tdSurname = document.createElement('td');\r\n  tdSurname.textContent = surname;\r\n\r\n  const tdPhone = document.createElement('td');\r\n  tdPhone.classList.add('telefon');\r\n  const phoneLink = document.createElement('a');\r\n  phoneLink.href = `tel:${phone}`;\r\n  phoneLink.textContent = phone;\r\n  tr.phoneLink = phoneLink;\r\n  tdPhone.append(phoneLink);\r\n\r\n  const tdEdit = document.createElement('button');\r\n  tdEdit.classList.add('btn', 'btn-outline-danger', 'btn-sm');\r\n  tdEdit.insertAdjacentHTML('beforeend', `\r\n  <i>Редактировать</i>\r\n  `);\r\n  tdEdit.style.cssText = `\r\n    padding-left: 20px;\r\n    background-image: url('../phonebook/img/edit.svg');\r\n    background-repeat: no-repeat;\r\n    background-position: 0 50%;\r\n  `;\r\n  tr.append(tdDel, tdName, tdSurname, tdPhone, tdEdit);\r\n  return tr;\r\n};\r\n\r\nexport default {\r\n  createHeader,\r\n  createLogo,\r\n  createMain,\r\n  createButtonsGroup,\r\n  createTable,\r\n  createForm,\r\n  createFooter,\r\n  createRow,\r\n};\r\n","import createElements from './createElements.js';\r\nimport * as serv from './serviceStorage.js';\r\n\r\nconst {\r\n  createHeader,\r\n  createLogo,\r\n  createMain,\r\n  createButtonsGroup,\r\n  createTable,\r\n  createForm,\r\n  createFooter,\r\n  createRow,\r\n} = createElements;\r\n\r\n// const {\r\n//   getContactData,\r\n// } = serviceStorage;\r\n\r\n// 3. рендерит форму страницы\r\nexport const renderPhoneBook = (app, title) => {\r\n  // создать header страницы\r\n  const header = createHeader();\r\n  // создать заголовок\r\n  const logo = createLogo(title);\r\n  // cоздать main\r\n  const main = createMain();\r\n  // создать обертку для кнопок, передавая массив\r\n  const buttonGroup = createButtonsGroup([\r\n    // придумываем параметры кнопок\r\n    {\r\n      className: 'btn btn-primary mr-3 js-add',\r\n      type: 'button',\r\n      text: 'Добавить',\r\n    },\r\n    {\r\n      className: 'btn btn-danger',\r\n      type: 'button',\r\n      text: 'Удалить',\r\n    },\r\n  ]);\r\n  // создать таблицу\r\n  const table = createTable();\r\n  // создать форму/модалку\r\n  const {form, overlay} = createForm();\r\n  // создать footer страницы\r\n  const footer = createFooter();\r\n\r\n  // вставить заколовок\r\n  header.headerContainer.append(logo);\r\n  // добавить на страницу обертку для кнопок и таблицу и overlay\r\n  // т.к. возвращается объект, то append .btnWrapper\r\n  main.mainContainer.append(buttonGroup.btnWrapper, table, overlay);\r\n  // добавить header и main и footer на страницу\r\n  app.append(header, main, footer);\r\n\r\n  return {\r\n    list: table.tbody,\r\n    thead: table.thead,\r\n    logo,\r\n    btnAdd: buttonGroup.btns[0],\r\n    btnDel: buttonGroup.btns[1],\r\n    formOverlay: overlay,\r\n    form,\r\n  };\r\n};\r\n\r\nexport const renderContacts = (elem) => {\r\n  const data = serv.getContactData();\r\n  const allRow = data.map(createRow);\r\n  elem.append(...allRow);\r\n  return allRow;\r\n};\r\n\r\n","// работа с localStorage\r\n// получение контактов из хранилища\r\nexport const getContactData = () => (localStorage.getItem('phonebook') ?\r\nJSON.parse(localStorage.getItem('phonebook')) : []);\r\n\r\n// записать данные в ханилище\r\nexport const setContactData = (data) =>\r\n  localStorage.setItem('phonebook', JSON.stringify(data));\r\n\r\n// удаляет из localStorage\r\nexport const removeContactData = phone => {\r\n  const data = getContactData();\r\n  const dataAfterDelete = data.filter(item => item.phone !== phone);\r\n  setContactData(dataAfterDelete);\r\n};\r\n// добавляет в localStorage\r\nexport const addContactData = contact => {\r\n  const data = getContactData();\r\n  data.push(contact);\r\n  setContactData(data);\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import createElements from './script/createElements.js';\r\nimport {renderContacts, renderPhoneBook} from './script/render.js';\r\nimport control from './script/control.js';\r\nimport {getContactData, setContactData} from './script/serviceStorage.js';\r\n\r\nimport './css/style.css';\r\n\r\n\r\nconst {\r\n  createRow,\r\n} = createElements;\r\n\r\nconst {\r\n  modalControl,\r\n  deleteControl,\r\n  formControl,\r\n} = control;\r\n\r\n// блочная область видимости -чтобы выносить в глобальную ОВ только то что нужно\r\n{\r\n  // 2. ф-я принимает селектор элемента и заголовок со страницы\r\n  // и передает в render функцию\r\n  const init = (selectApp, title) => {\r\n    // получить эл-т по селектору\r\n    const app = document.querySelector(selectApp);\r\n\r\n    const {\r\n      list,\r\n      thead,\r\n      logo,\r\n      btnAdd,\r\n      formOverlay,\r\n      form,\r\n      btnDel,\r\n    } = renderPhoneBook(app, title);\r\n\r\n    const listHoverRow = (list, logo) => {\r\n      const text = logo.textContent;\r\n\r\n      // наведение мыши - показывает контакт(телефон)\r\n      list.addEventListener('mouseover', (e) => {\r\n        logo.textContent = e.target.closest('.contact').phoneLink.textContent;\r\n      });\r\n      list.addEventListener('mouseout', () => {\r\n        logo.textContent = text;\r\n      });\r\n    };\r\n\r\n    // сортировать объект по полю (имени или фамилии)\r\n    // колл-бэк функция сортировки\r\n    const sortByField = function(field) {\r\n      return function(a, b) {\r\n        return a[field] < b[field] ? -1 : a[field] > b[field] ? 1 : 0;\r\n      };\r\n    };\r\n    // Функционал\r\n    const allRow = renderContacts(list);\r\n\r\n    const {closeModal} = modalControl(btnAdd, formOverlay);\r\n\r\n    // hoverRow(allRow, logo);\r\n    // ховер - показать контакт в header\r\n    listHoverRow(list, logo);\r\n\r\n    deleteControl(btnDel, list);\r\n    formControl(form, list, closeModal);\r\n\r\n    const data = getContactData();\r\n    setContactData(data);\r\n\r\n    // сортировка по имени или фамлилии\r\n    thead.addEventListener('click', e => {\r\n      const target = e.target;\r\n      const data = getContactData();\r\n      // сортировка по имени на событии в thead\r\n      if (target.classList.contains('firstName')) {\r\n        localStorage.setItem('sorting', 'name');\r\n        const sortData = data.sort(sortByField('name'));\r\n        // создать новые объекты в верстке\r\n        const sortRow = sortData.map(createRow);\r\n        // очистить элемент в верстке\r\n        list.innerHTML = '';\r\n        // вставить элементы в верстку\r\n        list.append(...sortRow);\r\n      }\r\n\r\n      // сортировка по фаимлии на событии в thead\r\n      if (target.classList.contains('surName')) {\r\n        localStorage.setItem('sorting', 'surname');\r\n        const sortData = data.sort(sortByField('surname'));\r\n        const sortRow = sortData.map(createRow);\r\n        // очистить элемент в верстке\r\n        list.innerHTML = '';\r\n        // вставить элементы в верстку\r\n        list.append(...sortRow);\r\n      }\r\n    });\r\n  };\r\n  // 1. выносит в window ф-ю инициализации app.\r\n  window.phonebookInit = init;\r\n}\r\n"],"names":[],"sourceRoot":""}